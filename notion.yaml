name: Notion
description: |
  # Notion MCP Server

  > [!NOTE] 
  > 
  > Weâ€™ve introduced **Notion MCP**, a remote MCP server with the following improvements:
  > - Easy installation via standard OAuth. No need to fiddle with JSON or API token anymore.
  > - Powerful tools tailored to AI agents. These tools are designed with optimized token consumption in mind.
  > 
  > Learn more and try it out [here](https://developers.notion.com/docs/mcp)


  ![notion-mcp-sm](https://github.com/user-attachments/assets/6c07003c-8455-4636-b298-d60ffdf46cd8)

  This project implements an [MCP server](https://spec.modelcontextprotocol.io/) for the [Notion API](https://developers.notion.com/reference/intro). 

  ![mcp-demo](https://github.com/user-attachments/assets/e3ff90a7-7801-48a9-b807-f7dd47f0d3d6)

  ### Installation

  #### 1. Setting up Integration in Notion:
  Go to [https://www.notion.so/profile/integrations](https://www.notion.so/profile/integrations) and create a new **internal** integration or select an existing one.

  ![Creating a Notion Integration token](https://raw.githubusercontent.com/makenotion/notion-mcp-server/main/docs/images/integrations-creation.png)

  While we limit the scope of Notion API's exposed (for example, you will not be able to delete databases via MCP), there is a non-zero risk to workspace data by exposing it to LLMs. Security-conscious users may want to further configure the Integration's _Capabilities_. 

  For example, you can create a read-only integration token by giving only "Read content" access from the "Configuration" tab:

  ![Notion Integration Token Capabilities showing Read content checked](https://raw.githubusercontent.com/makenotion/notion-mcp-server/main/docs/images/integrations-capabilities.png)

  #### 2. Connecting content to integration:
  Ensure relevant pages and databases are connected to your integration.

  To do this, visit the **Access** tab in your internal integration settings. Edit access and select the pages you'd like to use.
  ![Integration Access tab](https://raw.githubusercontent.com/makenotion/notion-mcp-server/main/docs/images/integration-access.png)

  ![Edit integration access](https://raw.githubusercontent.com/makenotion/notion-mcp-server/main/docs/images/page-access-edit.png)

  Alternatively, you can grant page access individually. You'll need to visit the target page, and click on the 3 dots, and select "Connect to integration". 

  ![Adding Integration Token to Notion Connections](https://raw.githubusercontent.com/makenotion/notion-mcp-server/main/docs/images/connections.png)

  #### 3. Click `Connect To Server` and Connect:

  **Note:** In the configuration, make sure to set either the `NOTION_TOKEN` (recommended) or the `OPENAPI_MCP_HEADERS` (for advanced use cases) with your Notion integration token.

  ### Examples

  1. Using the following instruction
  ```
  Comment "Hello MCP" on page "Getting started"
  ```

  AI will correctly plan two API calls, `v1/search` and `v1/comments`, to achieve the task

  2. Similarly, the following instruction will result in a new page named "Notion MCP" added to parent page "Development"
  ```
  Add a page titled "Notion MCP" to page "Development"
  ```

  3. You may also reference content ID directly
  ```
  Get the content of page 1a6b35e6e67f802fa7e1d27686f017f2
  ```

metadata:
  categories: SaaS & API Integrations,Databases
icon: https://avatars.githubusercontent.com/u/4792552?v=4
repoURL: https://github.com/makenotion/notion-mcp-server
env:
  - key: NOTION_TOKEN
    name: Notion Token
    required: false
    sensitive: true
    description: (Recommended) The Notion Integration token (ntn_****).
  - key: OPENAPI_MCP_HEADERS
    name: OpenAPI MCP Headers
    required: false
    sensitive: true
    description: '(For advanced use cases) JSON-encoded HTTP headers for MCP requests, e.g., {"Authorization": "Bearer ntn_****", "Notion-Version": "2022-06-28"}. The Notion Integration token (ntn_****) is required too.'
toolPreview:
  - name: API-get-user
    description: Retrieve a user
    params:
      user_id: User ID to retrieve
  - name: API-get-users
    description: List all users
    params:
      page_size: Optional maximum number of users to return
      start_cursor: Optional cursor for pagination
  - name: API-get-self
    description: Retrieve your token's bot user
  - name: API-post-database-query
    description: Query a database
    params:
      database_id: Database ID to query
      archived: Optional boolean to include archived pages
      filter: Optional filter object for query conditions
      filter_properties: Optional array of property names to filter by
      in_trash: Optional boolean to include pages in trash
      page_size: Optional maximum number of results to return
      sorts: Optional array of sort objects with direction and property
      start_cursor: Optional cursor for pagination
  - name: API-post-search
    description: Search by title
    params:
      filter: Optional filter object with property and value
      page_size: Optional maximum number of results to return
      query: Optional search query string
      sort: Optional sort object with direction and timestamp
      start_cursor: Optional cursor for pagination
  - name: API-get-block-children
    description: Retrieve block children
    params:
      block_id: Block ID to get children from
      page_size: Optional maximum number of children to return
      start_cursor: Optional cursor for pagination
  - name: API-patch-block-children
    description: Append block children
    params:
      block_id: Block ID to append children to
      children: Array of block objects to append
      after: Optional block ID to insert after
  - name: API-retrieve-a-block
    description: Retrieve a block
    params:
      block_id: Block ID to retrieve
  - name: API-update-a-block
    description: Update a block
    params:
      block_id: Block ID to update
      archived: Optional boolean to archive the block
      type: Optional block type object with updated properties
  - name: API-delete-a-block
    description: Delete a block
    params:
      block_id: Block ID to delete
  - name: API-retrieve-a-page
    description: Retrieve a page
    params:
      page_id: Page ID to retrieve
      filter_properties: Optional property names to filter response
  - name: API-patch-page
    description: Update page properties
    params:
      page_id: Page ID to update
      archived: Optional boolean to archive the page
      cover: Optional cover object with external URL and type
      icon: Optional icon object with emoji
      in_trash: Optional boolean to move page to trash
      properties: Optional properties object to update
  - name: API-post-page
    description: Create a page
    params:
      parent: Parent object with page_id
      properties: Properties object with title and type
      children: Optional array of child block IDs
      cover: Optional cover for the page
      icon: Optional icon for the page
  - name: API-create-a-database
    description: Create a database
    params:
      parent: Parent object with page_id and type
      properties: Properties object defining database schema
      title: Optional title array with text content and link
  - name: API-update-a-database
    description: Update a database
    params:
      database_id: Database ID to update
      description: Optional description array with text content and link
      properties: Optional properties object with name
      title: Optional title array with text content and link
  - name: API-retrieve-a-database
    description: Retrieve a database
    params:
      database_id: Database ID to retrieve
  - name: API-retrieve-a-page-property
    description: Retrieve a page property item
    params:
      page_id: Page ID containing the property
      property_id: Property ID to retrieve
      page_size: Optional maximum number of items to return
      start_cursor: Optional cursor for pagination
  - name: API-retrieve-a-comment
    description: Retrieve comments
    params:
      block_id: Block ID to get comments from
      page_size: Optional maximum number of comments to return
      start_cursor: Optional cursor for pagination
  - name: API-create-a-comment
    description: Create comment
    params:
      parent: Parent object with page_id
      rich_text: Rich text array with content

runtime: npx
npxConfig:
  package: '@notionhq/notion-mcp-server'
