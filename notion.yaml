name: Notion
description: |

  ![notion-mcp-sm](https://github.com/user-attachments/assets/6c07003c-8455-4636-b298-d60ffdf46cd8)

  ## Overview
  A Model Context Protocol (MCP) server for the Notion API that enables AI agents to interact with Notion workspaces. This server provides comprehensive tools for managing pages, databases, blocks, comments, and users with optimized token consumption for AI applications.

  ![mcp-demo](https://github.com/user-attachments/assets/e3ff90a7-7801-48a9-b807-f7dd47f0d3d6)

  ## Features
  - **Page Management**: Create, retrieve, update, and archive pages with full content support
  - **Database Operations**: Query, create, and update databases with advanced filtering and sorting
  - **Block Manipulation**: Manage content blocks including text, media, and structured content
  - **Search & Discovery**: Powerful search capabilities across all workspace content
  - **Comment System**: Create and retrieve comments on pages and blocks
  - **User Management**: Access user information and workspace members
  - **Security Controls**: Configurable read-only access and granular permission management

  ## What you'll need to connect

  **Required:**
  - **Notion Integration**: Create an internal integration at [notion.so/profile/integrations](https://www.notion.so/profile/integrations)
  - **Integration Token**: Your Notion integration token (ntn_****)

  **Setup Steps:**
  1. **Create Integration**: Set up a new internal integration in your Notion workspace
  2. **Configure Permissions**: Choose read-only or full access based on your security requirements
  3. **Connect Content**: Grant the integration access to specific pages and databases
  4. **Get Token**: Copy the integration token for configuration

  **Security Note**: Consider using read-only permissions to limit workspace data exposure to AI agents.

  ## Example Usage

  - "Comment 'Hello MCP' on page 'Getting started'"
  - "Add a page titled 'Notion MCP' to page 'Development'"
  - "Get the content of page 1a6b35e6e67f802fa7e1d27686f017f2"

metadata:
  categories: SaaS & API Integrations,Databases
icon: https://avatars.githubusercontent.com/u/4792552?v=4
repoURL: https://github.com/makenotion/notion-mcp-server
env:
  - key: NOTION_TOKEN
    name: Notion Token
    required: true
    sensitive: true
    description: Notion integration token (ntn_****).
toolPreview:
  - name: API-get-user
    description: Retrieve a user
    params:
      user_id: User ID to retrieve
  - name: API-get-users
    description: List all users
    params:
      page_size: Optional maximum number of users to return
      start_cursor: Optional cursor for pagination
  - name: API-get-self
    description: Retrieve your token's bot user
  - name: API-post-database-query
    description: Query a database
    params:
      database_id: Database ID to query
      archived: Optional boolean to include archived pages
      filter: Optional filter object for query conditions
      filter_properties: Optional array of property names to filter by
      in_trash: Optional boolean to include pages in trash
      page_size: Optional maximum number of results to return
      sorts: Optional array of sort objects with direction and property
      start_cursor: Optional cursor for pagination
  - name: API-post-search
    description: Search by title
    params:
      filter: Optional filter object with property and value
      page_size: Optional maximum number of results to return
      query: Optional search query string
      sort: Optional sort object with direction and timestamp
      start_cursor: Optional cursor for pagination
  - name: API-get-block-children
    description: Retrieve block children
    params:
      block_id: Block ID to get children from
      page_size: Optional maximum number of children to return
      start_cursor: Optional cursor for pagination
  - name: API-patch-block-children
    description: Append block children
    params:
      block_id: Block ID to append children to
      children: Array of block objects to append
      after: Optional block ID to insert after
  - name: API-retrieve-a-block
    description: Retrieve a block
    params:
      block_id: Block ID to retrieve
  - name: API-update-a-block
    description: Update a block
    params:
      block_id: Block ID to update
      archived: Optional boolean to archive the block
      type: Optional block type object with updated properties
  - name: API-delete-a-block
    description: Delete a block
    params:
      block_id: Block ID to delete
  - name: API-retrieve-a-page
    description: Retrieve a page
    params:
      page_id: Page ID to retrieve
      filter_properties: Optional property names to filter response
  - name: API-patch-page
    description: Update page properties
    params:
      page_id: Page ID to update
      archived: Optional boolean to archive the page
      cover: Optional cover object with external URL and type
      icon: Optional icon object with emoji
      in_trash: Optional boolean to move page to trash
      properties: Optional properties object to update
  - name: API-post-page
    description: Create a page
    params:
      parent: Parent object with page_id
      properties: Properties object with title and type
      children: Optional array of child block IDs
      cover: Optional cover for the page
      icon: Optional icon for the page
  - name: API-create-a-database
    description: Create a database
    params:
      parent: Parent object with page_id and type
      properties: Properties object defining database schema
      title: Optional title array with text content and link
  - name: API-update-a-database
    description: Update a database
    params:
      database_id: Database ID to update
      description: Optional description array with text content and link
      properties: Optional properties object with name
      title: Optional title array with text content and link
  - name: API-retrieve-a-database
    description: Retrieve a database
    params:
      database_id: Database ID to retrieve
  - name: API-retrieve-a-page-property
    description: Retrieve a page property item
    params:
      page_id: Page ID containing the property
      property_id: Property ID to retrieve
      page_size: Optional maximum number of items to return
      start_cursor: Optional cursor for pagination
  - name: API-retrieve-a-comment
    description: Retrieve comments
    params:
      block_id: Block ID to get comments from
      page_size: Optional maximum number of comments to return
      start_cursor: Optional cursor for pagination
  - name: API-create-a-comment
    description: Create comment
    params:
      parent: Parent object with page_id
      rich_text: Rich text array with content

runtime: npx
npxConfig:
  package: '@notionhq/notion-mcp-server'
