name: GitMCP
description: |
  A Model Context Protocol (MCP) server that transforms any GitHub project into a documentation hub. It enables AI tools like Cursor to access up-to-date documentation and code, eliminating code hallucinations by providing real-time access to the latest project information.

  ## Features
  - **Latest Documentation Access**: Grant AI assistants seamless access to any GitHub project's documentation and code with smart search capabilities
  - **Zero Setup**: Runs in the cloud - simply add the GitMCP URL as an MCP server in your IDE
  - **Open, Free, and Private**: Open-source, completely free, doesn't collect personal information or store queries
  - **Flexible Access**: Support for specific repositories or generic endpoint for maximum flexibility

  ## What you'll need to connect

  **No Setup Required**: GitMCP runs in the cloud with no authentication needed

  **Connection Options:**
  - **Specific Repository**: `gitmcp.io/{owner}/{repo}` - Use for select specific repositories
  - **Generic Server**: `gitmcp.io/docs` - Use for maximum flexibility when switching between repositories

  ## Example Usage

  ### Specific Repository
  - **URL**: `https://gitmcp.io/microsoft/playwright-mcp`
  - **Prompt**: "How do I use the Playwright MCP?"

  ### Dynamic Endpoint
  - **URL**: `gitmcp.io/docs`
  - **Prompt**: "I want to learn about the OpenAI Whisper speech recognition model"


metadata:
  categories: Developer Tools
icon: https://avatars.githubusercontent.com/u/182288589?v=4
repoURL: https://gitmcp.io
runtime: remote
remoteConfig:
  hostname: gitmcp.io
toolPreview:
  - name: fetch_<repo>_documentation
    description: 'Fetch entire documentation file from GitHub repository: <org>/<repo>. Useful for general questions. Always call this tool first if asked about <org>/<repo>.'
  - name: search_<repo>_documentation
    description: 'Semantically search within the fetched documentation from GitHub repository: <org>/<repo>. Useful for specific queries.'
    params:
      query: The search query to find relevant documentation
  - name: search_<repo>_code
    description: 'Search for code within the GitHub repository: "<org>/<repo>" using the GitHub Search API (exact match). Returns matching files for you to query further if relevant.'
    params:
      page: Page number to retrieve (starting from 1). Each page contains 30 results.
      query: The search query to find relevant code files
  - name: fetch_generic_url_content
    description: Generic tool to fetch content from any absolute URL, respecting robots.txt rules. Use this to retrieve referenced urls (absolute urls) that were mentioned in previously fetched documentation.
    params:
      url: The URL of the document or page to fetch
