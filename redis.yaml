name: Redis
description: |
  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
  [![Python Version](https://img.shields.io/badge/python-3.13%2B-blue)](https://www.python.org/downloads/)

  A Model Context Protocol (MCP) server that provides a natural language interface designed for agentic applications to efficiently manage and search data in Redis. It integrates seamlessly with MCP clients, enabling AI-driven workflows to interact with structured and unstructured data using conversational commands.

  ## Features
  - **Natural Language Queries**: Enable AI agents to query and update Redis using conversational commands
  - **Complete Redis Data Types**: Support for strings, hashes, lists, sets, sorted sets, streams, and JSON documents
  - **Advanced Search Capabilities**: Vector indexing, search operations, and efficient data retrieval
  - **Real-time Operations**: Pub/sub messaging, stream processing, and event handling
  - **Performance Optimized**: High-performance data operations with scalable architecture
  - **Security Controls**: Redis ACL support for access restriction and user management

  ## What you'll need to connect

  **Required:**
  - **Redis URI**: Connection string for your Redis instance (e.g., `redis://user:pass@localhost:6379/0`)

  **Optional Security:**
  - **Redis ACL**: Configure access controls and user permissions for restricted database access

  ## Example Usage

  - "Store the entire conversation in a stream"
  - "Cache this item with expiration time"
  - "Index and search this vector embedding"
  - "Create a leaderboard with sorted scores"

toolPreview:
  - name: set
    description: Set a Redis string value with an optional expiration time
    params:
      key: The key to set
      value: The value to store
      expiration: Optional expiration time in seconds
  - name: get
    description: Get a Redis string value
    params:
      key: The key to retrieve
  - name: hset
    description: Set a field in a hash stored at key with an optional expiration time
    params:
      name: The Redis hash key
      key: The field name inside the hash
      value: The value to set (string, int, or float)
      expire_seconds: Optional time in seconds after which the key should expire
  - name: hget
    description: Get the value of a field in a Redis hash
    params:
      name: The Redis hash key
      key: The field name inside the hash
  - name: hdel
    description: Delete a field from a Redis hash
    params:
      name: The Redis hash key
      key: The field name inside the hash
  - name: hgetall
    description: Get all fields and values from a Redis hash
    params:
      name: The Redis hash key
  - name: hexists
    description: Check if a field exists in a Redis hash
    params:
      name: The Redis hash key
      key: The field name inside the hash
  - name: set_vector_in_hash
    description: Store a vector as a field in a Redis hash (for embeddings)
    params:
      name: The Redis hash key
      vector: The vector (list of numbers) to store in the hash
      vector_field: The field name inside the hash (default "vector")
  - name: get_vector_from_hash
    description: Retrieve a vector from a Redis hash and convert it back from binary blob
    params:
      name: The Redis hash key
      vector_field: The field name inside the hash (default "vector")
  - name: lpush
    description: Push a value onto the left of a Redis list with optional expiration
    params:
      name: The Redis list key
      value: Value to push to the list
      expire: Optional expiration time in seconds
  - name: rpush
    description: Push a value onto the right of a Redis list with optional expiration
    params:
      name: The Redis list key
      value: Value to push to the list
      expire: Optional expiration time in seconds
  - name: lpop
    description: Remove and return the first element from a Redis list
    params:
      name: The Redis list key
  - name: rpop
    description: Remove and return the last element from a Redis list
    params:
      name: The Redis list key
  - name: lrange
    description: Get elements from a Redis list within a specific range
    params:
      name: The Redis list key
      start: Start index for the range
      stop: Stop index for the range
  - name: llen
    description: Get the length of a Redis list
    params:
      name: The Redis list key

metadata:
  categories: Databases
icon: https://avatars.githubusercontent.com/u/1529926?s=48&v=4
repoURL: https://github.com/redis/mcp-redis
env:
  - key: REDIS_URI
    name: Redis URI
    required: true
    sensitive: false
    description: URL for connecting to the Redis instance (e.g. redis://user:pass@localhost:6379/0).

runtime: uvx
uvxConfig:
  package: 'git+https://github.com/redis/mcp-redis.git@0.2.0'
  command: redis-mcp-server
  args:
    - --url
    - ${REDIS_URI}
