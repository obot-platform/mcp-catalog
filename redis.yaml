name: Redis
description: |
  # Redis MCP Server
  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
  [![Python Version](https://img.shields.io/badge/python-3.13%2B-blue)](https://www.python.org/downloads/)
  [![smithery badge](https://smithery.ai/badge/@redis/mcp-redis)](https://smithery.ai/server/@redis/mcp-redis)
  [![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/70102150-efe0-4705-9f7d-87980109a279)

  ## Overview
  This Official Redis MCP Server is a **natural language interface** designed for agentic applications to efficiently manage and search data in Redis. It integrates seamlessly with **MCP (Model Content Protocol) clients**, enabling AI-driven workflows to interact with structured and unstructured data in Redis. Using this MCP Server, you can ask questions like:

  - "Store the entire conversation in a stream"
  - "Cache this item"
  - "Store the session with an expiration time"
  - "Index and search this vector"

  ## Features
  - **Natural Language Queries**: Enables AI agents to query and update Redis using natural language.
  - **Seamless MCP Integration**: Works with any **MCP client** for smooth communication.
  - **Full Redis Support**: Handles **hashes, lists, sets, sorted sets, streams**, and more.
  - **Search & Filtering**: Supports efficient data retrieval and searching in Redis.
  - **Scalable & Lightweight**: Designed for **high-performance** data operations.

  ## Tools

  This MCP Server provides toolsets to manage the data stored in Redis.

  - `string` tools to set, get strings with expiration. Useful for storing simple configuration values, session data, or caching responses.
  - `hash` tools to store field-value pairs within a single key. The hash can store vector embeddings. Useful for representing objects with multiple attributes, user profiles, or product information where fields can be accessed individually.
  - `list` tools with common operations to append and pop items. Useful for queues, message brokers, or maintaining a list of most recent actions.
  - `set` tools to add, remove and list set members. Useful for tracking unique values like user IDs or tags, and for performing set operations like intersection.
  - `sorted set` tools to manage data for e.g. leaderboards, priority queues, or time-based analytics with score-based ordering.
  - `pub/sub` functionality to publish messages to channels and subscribe to receive them. Useful for real-time notifications, chat applications, or distributing updates to multiple clients.
  - `streams` tools to add, read, and delete from data streams. Useful for event sourcing, activity feeds, or sensor data logging with consumer groups support.
  - `JSON` tools to store, retrieve, and manipulate JSON documents in Redis. Useful for complex nested data structures, document databases, or configuration management with path-based access.

  Additional toolsets.

  - `query engine` tools to manage vector indexes and perform vector search
  - `server management` tool to retrieve information about the database

  ## Configuration

  ### Redis ACL

  You can configure Redis ACL to restrict the access to the Redis database. For example, to create a read-only user:

  ```
  127.0.0.1:6379> ACL SETUSER readonlyuser on >mypassword ~* +@read -@write
  ```

  Configure the user via command line arguments or environment variables.

  ### Configuration via Environment Variables

  If desired, you can use environment variables. Defaults are provided for all variables.

  | Name                 | Description                                               | Default Value |
  |----------------------|-----------------------------------------------------------|---------------|
  | `REDIS_HOST`         | Redis IP or hostname                                      | `"127.0.0.1"` |
  | `REDIS_PORT`         | Redis port                                                | `6379`        |
  | `REDIS_DB`           | Database                                                  | 0             |
  | `REDIS_USERNAME`     | Default database username                                 | `"default"`   |
  | `REDIS_PWD`          | Default database password                                 | ""            |
  | `REDIS_SSL`          | Enables or disables SSL/TLS                               | `False`       |
  | `REDIS_CA_PATH`      | CA certificate for verifying server                       | None          |
  | `REDIS_SSL_KEYFILE`  | Client's private key file for client authentication       | None          |
  | `REDIS_SSL_CERTFILE` | Client's certificate file for client authentication       | None          |
  | `REDIS_CERT_REQS`    | Whether the client should verify the server's certificate | `"required"`  |
  | `REDIS_CA_CERTS`     | Path to the trusted CA certificates file                  | None          |
  | `REDIS_CLUSTER_MODE` | Enable Redis Cluster mode                                 | `False`       |

  ## Testing

  You can use the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector) for visual debugging of this MCP Server.

  ## Example Use Cases
  - **AI Assistants**: Enable LLMs to fetch, store, and process data in Redis.
  - **Chatbots & Virtual Agents**: Retrieve session data, manage queues, and personalize responses.
  - **Data Search & Analytics**: Query Redis for **real-time insights and fast lookups**.
  - **Event Processing**: Manage event streams with **Redis Streams**.

  ## Contributing
  1. Fork the repo
  2. Create a new branch (`feature-branch`)
  3. Commit your changes
  4. Push to your branch and submit a PR!

  ## License
  This project is licensed under the **MIT License**.

  ## Badges

  <a href="https://glama.ai/mcp/servers/@redis/mcp-redis">
    <img width="380" height="200" src="https://glama.ai/mcp/servers/@redis/mcp-redis/badge" alt="Redis Server MCP server" />
  </a>

  ## Contact
  For questions or support, reach out via [GitHub Issues](https://github.com/redis/mcp-redis/issues).

metadata:
  categories: Databases,Verified
icon: https://avatars.githubusercontent.com/u/1529926?s=48&v=4
repoURL: https://github.com/redis/mcp-redis
env:
  - key: REDIS_URI
    name: Redis URI
    required: true
    sensitive: false
    description: URL for connecting to the Redis instance (e.g. redis://user:pass@localhost:6379/0).
args:
  - --from
  - git+https://github.com/redis/mcp-redis.git@0.2.0
  - redis-mcp-server
  - --url
  - ${REDIS_URI}
command: uvx
