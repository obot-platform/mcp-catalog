name: MongoDB Atlas
description: |
  ## Overview
  A Model Context Protocol (MCP) server for interacting with the MongoDB Atlas Cloud Service. This connector allows you to perform read and write actions with clusters, projects, databases, collections, and database users.

  ## Features
  - **Atlas Management**: Create and manage MongoDB Atlas projects, clusters, and database users
  - **Database Operations**: Perform CRUD operations on collections and documents
  - **Cluster Management**: List, inspect, and create MongoDB Atlas clusters including free tier clusters
  - **Access Control**: Configure IP access lists and manage database user permissions
  - **Monitoring**: View alerts and get database statistics
  - **Schema Operations**: Create indexes, inspect collection schemas, and manage database structures

  ## What you'll need to connect
  
  ### MongoDB Atlas API Credentials (Required)
  You'll need Service Account Atlas API credentials to use the Atlas management tools:
  
  - **API Client ID**: Your MongoDB Atlas Service Account Client ID
  - **API Client Secret**: Your MongoDB Atlas Service Account Client Secret (keep this secure)

  ### Setting up Atlas API Access
  
  1. **Create a Service Account:**
     - Log in to MongoDB Atlas at [cloud.mongodb.com](https://cloud.mongodb.com)
     - Navigate to Access Manager > Organization Access
     - Click Add New > Applications > Service Accounts
     - Enter name, description and expiration for your service account
     - (Recommended) Assign only the minimum permissions needed for your use case

  2. **Save Client Credentials:**
     - After creation, copy and save the Client ID and Client Secret
     - **Important:** The Client Secret won't be displayed again

  ### Required Permissions by Operation

  | Operation | Required Role | Scope |
  |-----------|---------------|-------|
  | List organizations/projects | Org Member or Org Read Only | Organization |
  | Create new projects | Org Project Creator | Organization |
  | View clusters/databases | Project Read Only | Project |
  | Create/manage clusters | Project Cluster Manager | Project |
  | Manage IP access lists | Project IP Access List Admin | Project |
  | Manage database users | Project Database Access Admin | Project |

  **Security Note:** Prefer project-level roles for most operations. Avoid Organization Owner unless you require full administrative control.

metadata:
  categories: Databases,Data & Analytics
icon: https://avatars.githubusercontent.com/u/45120?s=48&v=4
repoURL: https://github.com/mongodb-js/mongodb-mcp-server
env:
  - key: MDB_MCP_API_CLIENT_ID
    name: MongoDB API Client ID
    required: true
    sensitive: false
    description: The client ID for your MongoDB Service Accounts Atlas API credentials.
  - key: MDB_MCP_API_CLIENT_SECRET
    name: MongoDB API Client Secret
    required: true
    sensitive: true
    description: The client secret for your MongoDB Service Accounts Atlas API credentials.
  # - key: MDB_MCP_READ_ONLY ## TODO: need dynamic args support, see issue https://github.com/obot-platform/obot/issues/3619 feature request 1
  #   name: MongoDB Read Only
  #   required: false
  #   sensitive: false
  #   description: Whether to run the MongoDB MCP server in read-only mode, default is false.
toolPreview:
  - name: atlas-list-clusters
    description: List MongoDB Atlas clusters
    params:
      projectId: Optional project ID to filter clusters
  - name: atlas-list-projects
    description: List MongoDB Atlas projects
    params:
      orgId: Optional organization ID to filter projects
  - name: atlas-inspect-cluster
    description: Inspect MongoDB Atlas cluster
    params:
      clusterName: Name of the cluster to inspect
      projectId: Project ID containing the cluster
  - name: atlas-create-free-cluster
    description: Create a free MongoDB Atlas cluster
    params:
      name: Name for the new cluster
      projectId: Project ID where cluster will be created
      region: Optional region for the cluster
  - name: atlas-create-access-list
    description: Allow Ip/CIDR ranges to access your MongoDB Atlas clusters.
    params:
      projectId: Project ID to configure access for
      cidrBlocks: Optional array of CIDR blocks to allow
      comment: Optional comment for the access list entry
      currentIpAddress: Optional boolean to allow current IP address
      ipAddresses: Optional array of IP addresses to allow
  - name: atlas-inspect-access-list
    description: Inspect Ip/CIDR ranges with access to your MongoDB Atlas clusters.
    params:
      projectId: Project ID to inspect access list for
  - name: atlas-list-db-users
    description: List MongoDB Atlas database users
    params:
      projectId: Project ID to list users for
  - name: atlas-create-db-user
    description: Create an MongoDB Atlas database user
    params:
      projectId: Project ID to create user in
      roles: Array of role objects with collectionName, databaseName, and roleName
      username: Username for the new database user
      clusters: Optional array of cluster names to restrict access to
      password: Optional password for the user
  - name: atlas-create-project
    description: Create a MongoDB Atlas project
    params:
      organizationId: Optional organization ID
      projectName: Optional name for the new project
  - name: atlas-list-orgs
    description: List MongoDB Atlas organizations
  - name: atlas-connect-cluster
    description: Connect to MongoDB Atlas cluster
    params:
      clusterName: Name of the cluster to connect to
      projectId: Project ID containing the cluster
  - name: atlas-list-alerts
    description: List MongoDB Atlas alerts
    params:
      projectId: Project ID to list alerts for
  - name: connect
    description: Connect to a MongoDB instance
    params:
      connectionString: MongoDB connection string
  - name: list-collections
    description: List all collections for a given database
    params:
      database: Database name
  - name: list-databases
    description: List all databases for a MongoDB connection
  - name: collection-indexes
    description: Describe the indexes for a collection
    params:
      collection: Collection name
      database: Database name
  - name: create-index
    description: Create an index for a collection
    params:
      collection: Collection name
      database: Database name
      keys: Index keys specification object
      name: Optional index name
  - name: collection-schema
    description: Describe the schema for a collection
    params:
      collection: Collection name
      database: Database name
  - name: find
    description: Run a find query against a MongoDB collection
    params:
      collection: Collection name
      database: Database name
      filter: Optional query filter object
      limit: Optional maximum number of documents to return
      projection: Optional projection object
      sort: Optional sort specification object
  - name: insert-many
    description: Insert an array of documents into a MongoDB collection
    params:
      collection: Collection name
      database: Database name
      documents: Array of documents to insert
  - name: delete-many
    description: Removes all documents that match the filter from a MongoDB collection
    params:
      collection: Collection name
      database: Database name
      filter: Optional filter object
  - name: collection-storage-size
    description: Gets the size of the collection
    params:
      collection: Collection name
      database: Database name
  - name: count
    description: Gets the number of documents in a MongoDB collection using db.collection.count() and query as an optional filter parameter
    params:
      collection: Collection name
      database: Database name
      query: Optional filter/query object
  - name: db-stats
    description: Returns statistics that reflect the use state of a single database
    params:
      database: Database name
  - name: aggregate
    description: Run an aggregation against a MongoDB collection
    params:
      collection: Collection name
      database: Database name
      pipeline: Array of aggregation pipeline stages
  - name: update-many
    description: Updates all documents that match the specified filter for a collection
    params:
      collection: Collection name
      database: Database name
      update: Update specification object
      filter: Optional filter object
      upsert: Optional boolean to insert if no match found
  - name: rename-collection
    description: Renames a collection in a MongoDB database
    params:
      collection: Collection name
      database: Database name
      newName: New collection name
      dropTarget: Optional boolean to drop target collection if it exists
  - name: drop-database
    description: Removes the specified database, deleting the associated data files
    params:
      database: Database name
  - name: drop-collection
    description: Removes a collection or view from the database. The method also removes any indexes associated with the dropped collection.
    params:
      collection: Collection name
      database: Database name
  - name: explain
    description: Returns statistics describing the execution of the winning plan chosen by the query optimizer for the evaluated method
    params:
      collection: Collection name
      database: Database name
      method: Array specifying the method and arguments to explain
  - name: create-collection
    description: Creates a new collection in a database. If the database doesn't exist, it will be created automatically.
    params:
      collection: Collection name
      database: Database name
  - name: mongodb-logs
    description: Returns the most recent logged mongod events
    params:
      limit: Optional maximum number of log entries to return
      type: Optional log type filter

runtime: npx
npxConfig:
  package: mongodb-mcp-server
  args:
    - --apiClientId
    - ${MDB_MCP_API_CLIENT_ID}
    - --apiClientSecret
    - ${MDB_MCP_API_CLIENT_SECRET}
    - --readOnly
