name: MongoDB Atlas
description: |
  # MongoDB Atlas MCP Server

  A Model Context Protocol server for interacting with MongoDB Atlas Cloud Service.
  If you want to connect to your own MongoDB database, use the *MongoDB Local MCP Server* instead.

  <a name="getting-started"></a>

  ## üöÄ Prerequisites

  - A MongoDB connection string or Atlas API credentials, **_the Server will not start unless configured_**.
    - **_Service Accounts Atlas API credentials_** are required to use the Atlas tools. You can create a service account in MongoDB Atlas and use its credentials for authentication. See [Atlas API Access](#atlas-api-access) for more details.
    - If you have a MongoDB connection string, you can use it directly to connect to your MongoDB instance.

  ### Atlas API Access

  To use the Atlas API tools, you'll need to create a service account in MongoDB Atlas:

  > **‚ÑπÔ∏è Note:** For a detailed breakdown of the minimum required permissions for each Atlas operation, see the [Atlas API Permissions](#atlas-api-permissions) section below.

  1. **Create a Service Account:**
    - Log in to MongoDB Atlas at [cloud.mongodb.com](https://cloud.mongodb.com)
    - Navigate to Access Manager > Organization Access
    - Click Add New > Applications > Service Accounts
    - Enter name, description and expiration for your service account (e.g., "MCP, MCP Server Access, 7 days")
    - **Assign only the minimum permissions needed for your use case.**
      - See [Atlas API Permissions](#atlas-api-permissions) for details.
    - Click `Create`

  To learn more about Service Accounts, check the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/api/service-accounts-overview/).

  2. **Save Client Credentials:**
    - After creation, you'll be shown the Client ID and Client Secret
    - **Important:** Copy and save the Client Secret immediately as it won't be displayed again

  3. **Add Access List Entry:**
    - Add your IP address to the API access list

  4. **Configure the MCP Server:**
    - Use one of the configuration methods below to set your `apiClientId` and `apiClientSecret`

  ### Atlas API Permissions

  > **Security Warning:** Granting the Organization Owner role is rarely necessary and can be a security risk. Assign only the minimum permissions needed for your use case.

  #### Quick Reference: Required roles per operation

  | What you want to do                  | Safest Role to Assign (where)           |
  | ------------------------------------ | --------------------------------------- |
  | List orgs/projects                   | Org Member or Org Read Only (Org)       |
  | Create new projects                  | Org Project Creator (Org)               |
  | View clusters/databases in a project | Project Read Only (Project)             |
  | Create/manage clusters in a project  | Project Cluster Manager (Project)       |
  | Manage project access lists          | Project IP Access List Admin (Project)  |
  | Manage database users                | Project Database Access Admin (Project) |

  - **Prefer project-level roles** for most operations. Assign only to the specific projects you need to manage or view.
  - **Avoid Organization Owner** unless you require full administrative control over all projects and settings in the organization.

  For a full list of roles and their privileges, see the [Atlas User Roles documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#service-user-roles).

  ## üõ†Ô∏è Supported Tools

  ### Tool List

  #### MongoDB Atlas Tools

  - `atlas-list-orgs` - Lists MongoDB Atlas organizations
  - `atlas-list-projects` - Lists MongoDB Atlas projects
  - `atlas-create-project` - Creates a new MongoDB Atlas project
  - `atlas-list-clusters` - Lists MongoDB Atlas clusters
  - `atlas-inspect-cluster` - Inspect a specific MongoDB Atlas cluster
  - `atlas-create-free-cluster` - Create a free MongoDB Atlas cluster
  - `atlas-connect-cluster` - Connects to MongoDB Atlas cluster
  - `atlas-inspect-access-list` - Inspect IP/CIDR ranges with access to MongoDB Atlas clusters
  - `atlas-create-access-list` - Configure IP/CIDR access list for MongoDB Atlas clusters
  - `atlas-list-db-users` - List MongoDB Atlas database users
  - `atlas-create-db-user` - Creates a MongoDB Atlas database user
  - `atlas-list-alerts` - List MongoDB Atlas Alerts for a Project

  NOTE: atlas tools are only available when you set credentials on [configuration](#configuration) section.

  #### MongoDB Database Tools

  - `connect` - Connect to a MongoDB instance
  - `find` - Run a find query against a MongoDB collection
  - `aggregate` - Run an aggregation against a MongoDB collection
  - `count` - Get the number of documents in a MongoDB collection
  - `insert-one` - Insert a single document into a MongoDB collection
  - `insert-many` - Insert multiple documents into a MongoDB collection
  - `create-index` - Create an index for a MongoDB collection
  - `update-one` - Update a single document in a MongoDB collection
  - `update-many` - Update multiple documents in a MongoDB collection
  - `rename-collection` - Rename a MongoDB collection
  - `delete-one` - Delete a single document from a MongoDB collection
  - `delete-many` - Delete multiple documents from a MongoDB collection
  - `drop-collection` - Remove a collection from a MongoDB database
  - `drop-database` - Remove a MongoDB database
  - `list-databases` - List all databases for a MongoDB connection
  - `list-collections` - List all collections for a given database
  - `collection-indexes` - Describe the indexes for a collection
  - `collection-schema` - Describe the schema for a collection
  - `collection-storage-size` - Get the size of a collection in MB
  - `db-stats` - Return statistics about a MongoDB database

  Categories of tools:

  - `atlas` - MongoDB Atlas tools, such as list clusters, create cluster, etc.
  - `mongodb` - MongoDB database tools, such as find, aggregate, etc.

  Operation types:

  - `create` - Tools that create resources, such as create cluster, insert document, etc.
  - `update` - Tools that update resources, such as update document, rename collection, etc.
  - `delete` - Tools that delete resources, such as delete document, drop collection, etc.
  - `read` - Tools that read resources, such as find, aggregate, list clusters, etc.
  - `metadata` - Tools that read metadata, such as list databases, list collections, collection schema, etc.
  - `connect` - Tools that allow you to connect or switch the connection to a MongoDB instance. If this is disabled, you will need to provide a connection string through the config when starting the server.

metadata:
  categories: Databases,Data & Analytics
icon: https://avatars.githubusercontent.com/u/45120?s=48&v=4
repoURL: https://github.com/mongodb-js/mongodb-mcp-server
env:
  - key: MDB_MCP_API_CLIENT_ID
    name: MongoDB API Client ID
    required: true
    sensitive: false
    description: The client ID for your MongoDB Service Accounts Atlas API credentials.
  - key: MDB_MCP_API_CLIENT_SECRET
    name: MongoDB API Client Secret
    required: true
    sensitive: true
    description: The client secret for your MongoDB Service Accounts Atlas API credentials.
  # - key: MDB_MCP_READ_ONLY ## TODO: need dynamic args support, see issue https://github.com/obot-platform/obot/issues/3619 feature request 1
  #   name: MongoDB Read Only
  #   required: false
  #   sensitive: false
  #   description: Whether to run the MongoDB MCP server in read-only mode, default is false.
toolPreview:
  - name: atlas-list-clusters
    description: List MongoDB Atlas clusters
    params:
      projectId: Optional project ID to filter clusters
  - name: atlas-list-projects
    description: List MongoDB Atlas projects
    params:
      orgId: Optional organization ID to filter projects
  - name: atlas-inspect-cluster
    description: Inspect MongoDB Atlas cluster
    params:
      clusterName: Name of the cluster to inspect
      projectId: Project ID containing the cluster
  - name: atlas-create-free-cluster
    description: Create a free MongoDB Atlas cluster
    params:
      name: Name for the new cluster
      projectId: Project ID where cluster will be created
      region: Optional region for the cluster
  - name: atlas-create-access-list
    description: Allow Ip/CIDR ranges to access your MongoDB Atlas clusters.
    params:
      projectId: Project ID to configure access for
      cidrBlocks: Optional array of CIDR blocks to allow
      comment: Optional comment for the access list entry
      currentIpAddress: Optional boolean to allow current IP address
      ipAddresses: Optional array of IP addresses to allow
  - name: atlas-inspect-access-list
    description: Inspect Ip/CIDR ranges with access to your MongoDB Atlas clusters.
    params:
      projectId: Project ID to inspect access list for
  - name: atlas-list-db-users
    description: List MongoDB Atlas database users
    params:
      projectId: Project ID to list users for
  - name: atlas-create-db-user
    description: Create an MongoDB Atlas database user
    params:
      projectId: Project ID to create user in
      roles: Array of role objects with collectionName, databaseName, and roleName
      username: Username for the new database user
      clusters: Optional array of cluster names to restrict access to
      password: Optional password for the user
  - name: atlas-create-project
    description: Create a MongoDB Atlas project
    params:
      organizationId: Optional organization ID
      projectName: Optional name for the new project
  - name: atlas-list-orgs
    description: List MongoDB Atlas organizations
  - name: atlas-connect-cluster
    description: Connect to MongoDB Atlas cluster
    params:
      clusterName: Name of the cluster to connect to
      projectId: Project ID containing the cluster
  - name: atlas-list-alerts
    description: List MongoDB Atlas alerts
    params:
      projectId: Project ID to list alerts for
  - name: connect
    description: Connect to a MongoDB instance
    params:
      connectionString: MongoDB connection string
  - name: list-collections
    description: List all collections for a given database
    params:
      database: Database name
  - name: list-databases
    description: List all databases for a MongoDB connection
  - name: collection-indexes
    description: Describe the indexes for a collection
    params:
      collection: Collection name
      database: Database name
  - name: create-index
    description: Create an index for a collection
    params:
      collection: Collection name
      database: Database name
      keys: Index keys specification object
      name: Optional index name
  - name: collection-schema
    description: Describe the schema for a collection
    params:
      collection: Collection name
      database: Database name
  - name: find
    description: Run a find query against a MongoDB collection
    params:
      collection: Collection name
      database: Database name
      filter: Optional query filter object
      limit: Optional maximum number of documents to return
      projection: Optional projection object
      sort: Optional sort specification object
  - name: insert-many
    description: Insert an array of documents into a MongoDB collection
    params:
      collection: Collection name
      database: Database name
      documents: Array of documents to insert
  - name: delete-many
    description: Removes all documents that match the filter from a MongoDB collection
    params:
      collection: Collection name
      database: Database name
      filter: Optional filter object
  - name: collection-storage-size
    description: Gets the size of the collection
    params:
      collection: Collection name
      database: Database name
  - name: count
    description: Gets the number of documents in a MongoDB collection using db.collection.count() and query as an optional filter parameter
    params:
      collection: Collection name
      database: Database name
      query: Optional filter/query object
  - name: db-stats
    description: Returns statistics that reflect the use state of a single database
    params:
      database: Database name
  - name: aggregate
    description: Run an aggregation against a MongoDB collection
    params:
      collection: Collection name
      database: Database name
      pipeline: Array of aggregation pipeline stages
  - name: update-many
    description: Updates all documents that match the specified filter for a collection
    params:
      collection: Collection name
      database: Database name
      update: Update specification object
      filter: Optional filter object
      upsert: Optional boolean to insert if no match found
  - name: rename-collection
    description: Renames a collection in a MongoDB database
    params:
      collection: Collection name
      database: Database name
      newName: New collection name
      dropTarget: Optional boolean to drop target collection if it exists
  - name: drop-database
    description: Removes the specified database, deleting the associated data files
    params:
      database: Database name
  - name: drop-collection
    description: Removes a collection or view from the database. The method also removes any indexes associated with the dropped collection.
    params:
      collection: Collection name
      database: Database name
  - name: explain
    description: Returns statistics describing the execution of the winning plan chosen by the query optimizer for the evaluated method
    params:
      collection: Collection name
      database: Database name
      method: Array specifying the method and arguments to explain
  - name: create-collection
    description: Creates a new collection in a database. If the database doesn't exist, it will be created automatically.
    params:
      collection: Collection name
      database: Database name
  - name: mongodb-logs
    description: Returns the most recent logged mongod events
    params:
      limit: Optional maximum number of log entries to return
      type: Optional log type filter

runtime: npx
npxConfig:
  package: mongodb-mcp-server
  args:
    - --apiClientId
    - ${MDB_MCP_API_CLIENT_ID}
    - --apiClientSecret
    - ${MDB_MCP_API_CLIENT_SECRET}
    - --readOnly
